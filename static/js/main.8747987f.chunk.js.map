{"version":3,"sources":["components/SearchBox/index.tsx","queries/index.ts","components/Person/RemoveIcon.tsx","components/Person/index.tsx","containers/Persons/index.tsx","containers/Party/index.tsx","App.tsx","components/GlobalStyles/index.tsx","serviceWorker.ts","resolvers/index.ts","typedefs.ts","client.ts","index.tsx"],"names":["SearchInput","styled","input","SearchBox","onChange","e","target","value","GET_PARTY","gql","GET_PERSONS","SET_PARTY_PERSON","RemoveIcon","width","height","opacity","background","iconColor","onClick","rest","viewBox","fill","xmlns","d","fillOpacity","Wrapper","div","PersonImage","props","imgUrl","StyledCloseIcon","PersonType","span","Person","onRemove","children","isPersonType","setPerson","stopPropagation","PersonsContainer","Loading","Error","Persons","removed","useQuery","variables","filter","name","data","loading","error","useMutation","setPartyPerson","useCallback","person","results","characters","filteredByRemoved","item","some","removedItem","id","map","key","image","PartyContainer","PartyPersons","PartyHead","Party","rick","party","morty","Container","App","useState","val","setValue","setRemoved","debounce","length","removedWithNewPerson","push","GlobalStyles","createGlobalStyle","Boolean","window","location","hostname","match","resolvers","Mutation","_","cache","readQuery","query","isRick","toLowerCase","includes","isMorty","writeData","__typename","typeDefs","InMemoryCache","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8747987f.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst SearchInput = styled.input`\n  border: 1px solid #a0a0a0;\n  width: 100%;\n  font-size: 30px;\n  line-height: 35px;\n  padding: 21px 25px;\n  margin-bottom: 30px;\n`;\n\ninterface SearchBoxProps {\n  onChange: (value: string | number) => void;\n}\n\nconst SearchBox = ({ onChange }: SearchBoxProps) => (\n  <SearchInput\n    onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n      onChange(e.target.value)\n    }\n  />\n);\n\nexport default SearchBox;\n","import gql from 'graphql-tag';\n\nexport const GET_PARTY = gql`\n  query PartyQuery {\n    party @client {\n      rick {\n        id\n        name\n        image\n      }\n      morty {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\nexport const GET_PERSONS = gql`\n  query CharactersQuery($filter: FilterCharacter) {\n    characters(filter: $filter) {\n      results {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\nexport const SET_PARTY_PERSON = gql`\n  mutation SetPartyPersonMutation($person: SetPerson) {\n    setPartyPerson(person: $person) @client\n  }\n`;\n","import React, {MouseEvent} from 'react';\n\ninterface IconProps {\n  width?: number;\n  height?: number;\n  opacity?: number;\n  color?: string;\n  background?: string;\n  iconColor?: string;\n  onClick?: (e: MouseEvent) => void;\n}\n\nconst RemoveIcon = ({\n  width = 30,\n  height = 30,\n  opacity = 0.75,\n  background = 'white',\n  iconColor = '#000',\n  onClick,\n  ...rest\n}: IconProps): JSX.Element => {\n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox=\"0 0 30 30\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      onClick={onClick}\n      {...rest}\n    >\n      <path\n        d=\"M30 15C30 23.2843 23.2843 30 15 30C6.71573 30 0 23.2843 0 15C0 6.71573 6.71573 0 15 0C23.2843 0 30 6.71573 30 15Z\"\n        fill={background}\n        fillOpacity={opacity}\n      />\n      <path\n        d=\"M20 11.0071L18.9929 10L15 13.9929L11.0071 10L10 11.0071L13.9929 15L10 18.9929L11.0071 20L15 16.0071L18.9929 20L20 18.9929L16.0071 15L20 11.0071Z\"\n        fill={iconColor}\n      />\n    </svg>\n  );\n};\n\nexport default RemoveIcon;\n","import React, { MouseEvent } from 'react';\nimport styled from 'styled-components';\nimport { Result } from '../../types';\nimport RemoveIcon from './RemoveIcon';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  max-width: 200px;\n  height: 220px;\n  padding: 10px;\n`;\n\ninterface PersonImage {\n  imgUrl?: string;\n}\n\nconst PersonImage = styled.div`\n  position: relative;\n  display: block;\n  width: 100%;\n  height: 100%;\n  background: #dadada;\n  cursor: pointer;\n\n  ${(props: PersonImage) =>\n    props.imgUrl &&\n    `\n    background-image: url(${props.imgUrl});\n    background-size: cover;\n  `}\n`;\n\nconst StyledCloseIcon = styled(RemoveIcon)`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  cursor: pointer;\n`;\n\nconst PersonType = styled.span`\n  position: absolute;\n  bottom: 15px;\n  color: #fff;\n  display: block;\n  width: 100%;\n  font-size: 24px;\n  line-height: 28px;\n  text-align: center;\n  text-transform: uppercase;\n`;\n\ninterface PersonProps {\n  id?: string;\n  imgUrl?: string;\n  onRemove?: () => void;\n  children?: string | React.ReactChild;\n  isPersonType?: boolean;\n  person?: Result;\n  setPerson?: () => void;\n}\n\nconst Person = ({\n  imgUrl,\n  onRemove,\n  children,\n  isPersonType,\n  setPerson,\n}: PersonProps): JSX.Element => {\n  const handleRemove = (e: MouseEvent): void => {\n    e.stopPropagation();\n    if (onRemove) {\n      onRemove();\n    }\n  };\n  return (\n    <Wrapper>\n      <PersonImage imgUrl={imgUrl} onClick={setPerson}>\n        {onRemove && <StyledCloseIcon onClick={handleRemove} />}\n        {isPersonType && !imgUrl && <PersonType>{children}</PersonType>}\n      </PersonImage>\n    </Wrapper>\n  );\n};\n\nexport default Person;\n","import React, { useCallback } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport { GET_PERSONS, SET_PARTY_PERSON } from '../../queries';\nimport Person from '../../components/Person';\nimport {\n  CharactersQuery,\n  CharactersQueryVariables,\n  Result,\n  Result as ResultItem,\n} from '../../types';\n\nconst PersonsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-left: -10px;\n  margin-right: -10px;\n`;\n\nconst Loading = styled.div`\n  text-align: center;\n  padding: 10px 0;\n`;\n\nconst Error = styled.div`\n  text-align: center;\n  padding: 10px 0;\n  color: red;\n`;\n\ninterface Persons {\n  value: string;\n  removed: Array<number | string>;\n  onRemove: (id: string | number) => void;\n}\n\nconst Persons = ({ value, onRemove, removed }: Persons): JSX.Element | null => {\n  const { data, loading, error } = useQuery<\n    CharactersQuery,\n    CharactersQueryVariables\n  >(GET_PERSONS, {\n    variables: {\n      filter: {\n        name: value,\n      },\n    },\n  });\n\n  const [setPartyPerson] = useMutation(SET_PARTY_PERSON);\n  const setPerson = useCallback(\n    (person: Result | undefined) => {\n      if (person) {\n        setPartyPerson({\n          variables: {\n            person: person,\n          },\n        });\n      }\n    },\n    [setPartyPerson],\n  );\n\n  if (error) return <Error>¯\\_(ツ)_/¯ - Ooops. Something went wrong!</Error>;\n\n  const results = data?.characters?.results;\n  const filteredByRemoved: ResultItem[] | undefined = results?.filter(\n    item =>\n      !removed.some(removedItem => removedItem === item?.id) && item !== null,\n  );\n\n  return loading ? (\n    <Loading>Loading...</Loading>\n  ) : (\n    <PersonsContainer>\n      {filteredByRemoved &&\n        filteredByRemoved.map((item: ResultItem) => (\n          <Person\n            key={item?.id}\n            imgUrl={item?.image}\n            onRemove={(): void => onRemove(item?.id)}\n            setPerson={(): void => setPerson(item)}\n            person={item}\n          />\n        ))}\n    </PersonsContainer>\n  );\n};\n\nexport default Persons;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport Person from '../../components/Person';\nimport { GET_PARTY } from '../../queries';\nimport { PartyQuery } from '../../types';\n\nconst PartyContainer = styled.div`\n  max-width: 390px;\n  padding-top: 100px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst PartyPersons = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PartyHead = styled.div`\n  font-size: 30px;\n  line-height: 35px;\n  font-weight: bold;\n  margin-bottom: 5px;\n  text-align: center;\n  text-transform: uppercase;\n`;\n\nconst Party: React.FC = () => {\n  const { data } = useQuery<PartyQuery>(GET_PARTY);\n  const rick = data?.party?.rick;\n  const morty = data?.party?.morty;\n  return (\n    <PartyContainer>\n      <PartyHead>Party</PartyHead>\n      <PartyPersons>\n        <Person id={rick?.id} imgUrl={rick?.image} isPersonType>\n          Rick\n        </Person>\n        <Person id={morty?.id} imgUrl={morty?.image} isPersonType>\n          Morty\n        </Person>\n      </PartyPersons>\n    </PartyContainer>\n  );\n};\n\nexport default Party;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport SearchBox from './components/SearchBox';\nimport './App.css';\nimport Persons from './containers/Persons';\nimport Party from './containers/Party';\n\nconst Container = styled.div`\n  max-width: 800px;\n  width: 100%;\n  margin: 0 auto;\n  padding-top: 150px;\n  min-height: 700px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst App = () => {\n  const [val, setValue] = useState('');\n  const [removed, setRemoved] = useState<Array<number | string>>([]);\n\n  const onChange = debounce(value => setValue(value), 300);\n\n  const onRemove = (id: number | string): void => {\n    const removedWithNewPerson = [...removed];\n    removedWithNewPerson.push(id);\n    setRemoved(removedWithNewPerson);\n  };\n\n  return (\n    <Container>\n      <SearchBox onChange={onChange} />\n      {val && val.length > 2 ? (\n        <Persons value={val} removed={removed} onRemove={onRemove} />\n      ) : null}\n      <Party />\n    </Container>\n  );\n};\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: 'Roboto', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n* {\n    box-sizing: border-box;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_PARTY } from '../queries';\nimport { ApolloCache } from 'apollo-cache';\nimport { PartyQuery, Result } from '../types';\n\nexport const resolvers = {\n  Mutation: {\n    setPartyPerson: (\n      _: any,\n      { person }: { person: Result },\n      { cache }: { cache: ApolloCache<any> },\n    ) => {\n      const data = cache.readQuery<PartyQuery>({ query: GET_PARTY });\n      const isRick = person.name.toLowerCase().includes('rick');\n      const isMorty = person.name.toLowerCase().includes('morty');\n\n      cache.writeData({\n        data: {\n          party: {\n            rick: isRick\n              ? {\n                  id: person.id,\n                  name: person.name,\n                  image: person.image,\n                  __typename: 'Character',\n                }\n              : data?.party?.rick,\n            morty: isMorty\n              ? {\n                  id: person.id,\n                  name: person.name,\n                  image: person.image,\n                  __typename: 'Character',\n                }\n              : data?.party?.morty,\n            __typename: 'Party',\n          },\n        },\n      });\n\n      return person;\n    },\n  },\n};\n","import gql from 'graphql-tag';\n\nexport const typeDefs = gql`\n  directive @client on FIELD\n\n  type Characters {\n    info: Info\n    results: [Character]\n  }\n\n  input GetCharactersInput {\n    filter: FilterCharacter\n    page: Int\n  }\n\n  input FilterCharacter {\n    name: String\n    status: String\n    species: String\n    type: String\n    gender: String\n  }\n\n  type Character {\n    id: ID\n    name: String\n    image: String\n  }\n\n  input SetPerson {\n    id: ID\n    name: String\n    image: String\n  }\n\n  type Info {\n    count: Int\n    pages: Int\n    next: Int\n    prev: Int\n  }\n\n  type Party {\n    rick: Character\n    morty: Character\n  }\n\n  type Query {\n    characters(filter: FilterCharacter): Characters\n    party: Party\n  }\n\n  type Mutation {\n    setPartyPerson(person: SetPerson): Character\n  }\n`;\n","import ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport { resolvers } from './resolvers';\nimport { typeDefs } from './typedefs';\n\nconst cache = new InMemoryCache({});\nexport const client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache,\n  resolvers,\n  typeDefs,\n});\n\ncache.writeData({\n  data: {\n    party: {\n      rick: {\n        id: null,\n        name: null,\n        image: null,\n        __typename: 'Character',\n      },\n      morty: {\n        id: null,\n        name: null,\n        image: null,\n        __typename: 'Character',\n      },\n      __typename: 'Party',\n    },\n  },\n});\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport App from './App';\nimport { GlobalStyles } from './components/GlobalStyles';\nimport * as serviceWorker from './serviceWorker';\nimport { client } from './client';\n\nReactDOM.render(\n  <Fragment>\n    <GlobalStyles />\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Fragment>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}